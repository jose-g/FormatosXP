@model MGP.CI.SEGURIDAD.Presentacion.ViewModels.ModulosxPerfilViewModel

<style>
    .abix-tree-list li {
        list-style: none;
    }

    .fila_arbol:hover {
        background-color: #f2f5ca;
    }

    .abix-tree-list .collapsed span.icon,
    .abix-tree-list .expanded span.icon {
        margin-right: 6px;
        cursor: pointer;
    }

    .mi_estilo tr:nth-child(even) {
        background-color: #ffecec;
    }

    .mi_estilo tr:nth-child(odd) {
        background-color: #ffdada;
    }
</style>

<ul id='tree_sis'>
    @foreach (var Sistema in Model.LstSistemas)
    {
        <li>
            @Sistema.Nombre
            <ul>
                @foreach (var Modulos in Model.LstModulosxSistema.Where(x => x.SistemaId == Sistema.SistemaId))
                {
                    <li>
                        @Modulos.Nombre
                        <ul>
                            <li>
                                @foreach (var ModulosxPerfil in Model.LstModulosxPerfil.Where(x => x.ModuloId == Modulos.ModuloId))
                                {
                                    <table id="@ModulosxPerfil.ModuloId" class="table success table-hover table-condensed">
                                        <tbody>
                                            @foreach (var permiso in Model.LstPermisos)
                                            {
                                                <tr>
                                                    <td>@permiso.Nombre.ToString()</td>
                                                    <td>
                                                        @{
                                                            var RPermiso = Model.LstPermisoPerfilModulosBE.Where(x => x.PerfilModuloId == ModulosxPerfil.PerfilModuloId).ToList().Find(x => x.PermisoId == permiso.PermisoId);
                                                            if (RPermiso != null)
                                                            {
                                                                <input type="checkbox" id="chkestadopermiso" value=@RPermiso.PermisoId checked onclick="UpdatePermiso(this, @ModulosxPerfil.PerfilModuloId, @RPermiso.PermisoId)">
                                                            }
                                                            else
                                                            {
                                                                <input type="checkbox" id="chkestadopermiso" value="0" onclick="UpdatePermiso(this, @ModulosxPerfil.PerfilModuloId, @permiso.PermisoId)">
                                                            }

                                                        }
                                                    </td>

                                                </tr>
                                            }


                                            @*@foreach (var permiso in Model.LstPermisoPerfilModulosBE.Where(x => x.PerfilModuloId == ModulosxPerfil.PerfilModuloId))
                                                {
                                                    var strpermiso = Model.LstPermisos.Find(x => x.PermisoId == permiso.PermisoId).Nombre;
                                                <tr>
                                                    <td>
                                                        @strpermiso
                                                    </td>
                                                    <td>
                                                        @strpermiso
                                                    </td>
                                                </tr>
                                                }*@

                                        </tbody>
                                    </table>
                                }
                            </li>
                        </ul>
                    </li>
                }
            </ul>
        </li>
    }
</ul>

<script>
    (function (e, t, n, r) {
        function o(t, n) {
            this.element = t;
            this.$element = e(t);
            this.options = e.extend({}, s, n);
            this._defaults = s;
            this._name = i, this.$topLevelBranches, this.$allBranches, this.init()
        }
        var i = "abixTreeList", s = { collapsedIconClass: "glyphicon glyphicon-plus", expandedIconClass: "glyphicon glyphicon-minus" };
        o.prototype.init = function () {
            var t = this;
            t.$topLevelBranches = t.$element.children("li");
            t.$allBranches = t.$element.find("li");
            t.$element.addClass("abix-tree-list");
            t.$allBranches.not(t.$topLevelBranches).hide();
            t.$allBranches.each(function () {
                var n = e(this).children("ul,ol"); if (n.size() > 0) {
                    e(this).addClass("collapsed");
                    e('<span class="icon ' + t.options.collapsedIconClass + '"></span>').prependTo(e(this))
                }
            }); t.$allBranches.children("span.icon").on("click", function (n) {
                if (e(this).parent().hasClass("collapsed")) {
                    t.expand(e(this).parent());
                    n.stopPropagation()
                } if (e(this).parent().hasClass("expanded")) {
                    t.collapse(e(this).parent());
                    n.stopPropagation()
                }
            });
            e("#tree-expand-all").on("click", function (e) {
                e.preventDefault();
                t.expandAll(); e.stopPropagation()
            });
            e("#tree-collapse-all").on("click", function (e) {
                e.preventDefault(); t.collapseAll();
                e.stopPropagation()
            })
        };
        o.prototype.expand = function (e) {
            var t = this; e.children("ul,ol").children("li").show(100, function () {
                e.removeClass("collapsed").addClass("expanded");
                e.children("span.icon").removeClass(t.options.collapsedIconClass).addClass(t.options.expandedIconClass)
            })
        };
        o.prototype.collapse = function (e) {
            var t = this; e.children("ul,ol").children("li").hide(100, function () {
                e.removeClass("expanded").addClass("collapsed");
                e.children("span.icon").removeClass(t.options.expandedIconClass).addClass(t.options.collapsedIconClass)
            })
        };
        o.prototype.collapseAll = function () {
            var e = this; e.$allBranches.not(e.$topLevelBranches).hide(1e3, function () {
                e.$allBranches.removeClass("expanded").addClass("collapsed");
                e.$allBranches.children("span.icon").removeClass(e.options.expandedIconClass).addClass(e.options.collapsedIconClass)
            })
        };
        o.prototype.expandAll = function () {
            var e = this; e.$allBranches.show(1e3, function () {
                e.$allBranches.removeClass("collapsed").addClass("expanded");
                e.$allBranches.children("span.icon").removeClass(e.options.collapsedIconClass).addClass(e.options.expandedIconClass)
            })
        };
        e.fn[i] = function (t) { return this.each(function () { if (!e.data(this, "plugin_" + i)) { e.data(this, "plugin_" + i, new o(this, t)) } }) }
    })


        (jQuery, window, document)
    $(document).ready(function () {
        $('#tree_sis').abixTreeList();
    });

</script>
